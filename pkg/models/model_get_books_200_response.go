/*
Inkspire

This app allows for making lists of various types across different media and will eventually have fuzzy searching and rating functionality added to it. 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetBooks200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetBooks200Response{}

// GetBooks200Response struct for GetBooks200Response
type GetBooks200Response struct {
	Data []Book `json:"data,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
}

// NewGetBooks200Response instantiates a new GetBooks200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetBooks200Response() *GetBooks200Response {
	this := GetBooks200Response{}
	return &this
}

// NewGetBooks200ResponseWithDefaults instantiates a new GetBooks200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetBooks200ResponseWithDefaults() *GetBooks200Response {
	this := GetBooks200Response{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetBooks200Response) GetData() []Book {
	if o == nil || IsNil(o.Data) {
		var ret []Book
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetBooks200Response) GetDataOk() ([]Book, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetBooks200Response) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []Book and assigns it to the Data field.
func (o *GetBooks200Response) SetData(v []Book) {
	o.Data = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *GetBooks200Response) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetBooks200Response) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *GetBooks200Response) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *GetBooks200Response) SetMetadata(v Metadata) {
	o.Metadata = &v
}

func (o GetBooks200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetBooks200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableGetBooks200Response struct {
	value *GetBooks200Response
	isSet bool
}

func (v NullableGetBooks200Response) Get() *GetBooks200Response {
	return v.value
}

func (v *NullableGetBooks200Response) Set(val *GetBooks200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetBooks200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetBooks200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetBooks200Response(val *GetBooks200Response) *NullableGetBooks200Response {
	return &NullableGetBooks200Response{value: val, isSet: true}
}

func (v NullableGetBooks200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetBooks200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


