/*
Inkspire

This app allows for making lists of various types across different media and will eventually have fuzzy searching and rating functionality added to it. 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NewBook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewBook{}

// NewBook struct for NewBook
type NewBook struct {
	Title *string `json:"title,omitempty"`
	AuthorId *string `json:"authorId,omitempty"`
	SeriesId *string `json:"seriesId,omitempty"`
	Genres []string `json:"genres,omitempty"`
	Pages *int32 `json:"pages,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewNewBook instantiates a new NewBook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewBook() *NewBook {
	this := NewBook{}
	return &this
}

// NewNewBookWithDefaults instantiates a new NewBook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewBookWithDefaults() *NewBook {
	this := NewBook{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *NewBook) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBook) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *NewBook) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *NewBook) SetTitle(v string) {
	o.Title = &v
}

// GetAuthorId returns the AuthorId field value if set, zero value otherwise.
func (o *NewBook) GetAuthorId() string {
	if o == nil || IsNil(o.AuthorId) {
		var ret string
		return ret
	}
	return *o.AuthorId
}

// GetAuthorIdOk returns a tuple with the AuthorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBook) GetAuthorIdOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorId) {
		return nil, false
	}
	return o.AuthorId, true
}

// HasAuthorId returns a boolean if a field has been set.
func (o *NewBook) HasAuthorId() bool {
	if o != nil && !IsNil(o.AuthorId) {
		return true
	}

	return false
}

// SetAuthorId gets a reference to the given string and assigns it to the AuthorId field.
func (o *NewBook) SetAuthorId(v string) {
	o.AuthorId = &v
}

// GetSeriesId returns the SeriesId field value if set, zero value otherwise.
func (o *NewBook) GetSeriesId() string {
	if o == nil || IsNil(o.SeriesId) {
		var ret string
		return ret
	}
	return *o.SeriesId
}

// GetSeriesIdOk returns a tuple with the SeriesId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBook) GetSeriesIdOk() (*string, bool) {
	if o == nil || IsNil(o.SeriesId) {
		return nil, false
	}
	return o.SeriesId, true
}

// HasSeriesId returns a boolean if a field has been set.
func (o *NewBook) HasSeriesId() bool {
	if o != nil && !IsNil(o.SeriesId) {
		return true
	}

	return false
}

// SetSeriesId gets a reference to the given string and assigns it to the SeriesId field.
func (o *NewBook) SetSeriesId(v string) {
	o.SeriesId = &v
}

// GetGenres returns the Genres field value if set, zero value otherwise.
func (o *NewBook) GetGenres() []string {
	if o == nil || IsNil(o.Genres) {
		var ret []string
		return ret
	}
	return o.Genres
}

// GetGenresOk returns a tuple with the Genres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBook) GetGenresOk() ([]string, bool) {
	if o == nil || IsNil(o.Genres) {
		return nil, false
	}
	return o.Genres, true
}

// HasGenres returns a boolean if a field has been set.
func (o *NewBook) HasGenres() bool {
	if o != nil && !IsNil(o.Genres) {
		return true
	}

	return false
}

// SetGenres gets a reference to the given []string and assigns it to the Genres field.
func (o *NewBook) SetGenres(v []string) {
	o.Genres = v
}

// GetPages returns the Pages field value if set, zero value otherwise.
func (o *NewBook) GetPages() int32 {
	if o == nil || IsNil(o.Pages) {
		var ret int32
		return ret
	}
	return *o.Pages
}

// GetPagesOk returns a tuple with the Pages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBook) GetPagesOk() (*int32, bool) {
	if o == nil || IsNil(o.Pages) {
		return nil, false
	}
	return o.Pages, true
}

// HasPages returns a boolean if a field has been set.
func (o *NewBook) HasPages() bool {
	if o != nil && !IsNil(o.Pages) {
		return true
	}

	return false
}

// SetPages gets a reference to the given int32 and assigns it to the Pages field.
func (o *NewBook) SetPages(v int32) {
	o.Pages = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NewBook) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBook) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NewBook) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *NewBook) SetStatus(v string) {
	o.Status = &v
}

func (o NewBook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewBook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.AuthorId) {
		toSerialize["authorId"] = o.AuthorId
	}
	if !IsNil(o.SeriesId) {
		toSerialize["seriesId"] = o.SeriesId
	}
	if !IsNil(o.Genres) {
		toSerialize["genres"] = o.Genres
	}
	if !IsNil(o.Pages) {
		toSerialize["pages"] = o.Pages
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableNewBook struct {
	value *NewBook
	isSet bool
}

func (v NullableNewBook) Get() *NewBook {
	return v.value
}

func (v *NullableNewBook) Set(val *NewBook) {
	v.value = val
	v.isSet = true
}

func (v NullableNewBook) IsSet() bool {
	return v.isSet
}

func (v *NullableNewBook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewBook(val *NewBook) *NullableNewBook {
	return &NullableNewBook{value: val, isSet: true}
}

func (v NullableNewBook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewBook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


