/*
Inkspire

This app allows for making lists of various types across different media and will eventually have fuzzy searching and rating functionality added to it. 

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Review type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Review{}

// Review struct for Review
type Review struct {
	Id string `json:"id"`
	BookId string `json:"bookId"`
	Rating *int32 `json:"rating,omitempty"`
	ReviewText *string `json:"reviewText,omitempty"`
	CreatedAt time.Time `json:"createdAt"`
}

type _Review Review

// NewReview instantiates a new Review object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReview(id string, bookId string, createdAt time.Time) *Review {
	this := Review{}
	this.Id = id
	this.BookId = bookId
	this.CreatedAt = createdAt
	return &this
}

// NewReviewWithDefaults instantiates a new Review object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewWithDefaults() *Review {
	this := Review{}
	return &this
}

// GetId returns the Id field value
func (o *Review) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Review) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Review) SetId(v string) {
	o.Id = v
}

// GetBookId returns the BookId field value
func (o *Review) GetBookId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BookId
}

// GetBookIdOk returns a tuple with the BookId field value
// and a boolean to check if the value has been set.
func (o *Review) GetBookIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BookId, true
}

// SetBookId sets field value
func (o *Review) SetBookId(v string) {
	o.BookId = v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *Review) GetRating() int32 {
	if o == nil || IsNil(o.Rating) {
		var ret int32
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Review) GetRatingOk() (*int32, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *Review) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given int32 and assigns it to the Rating field.
func (o *Review) SetRating(v int32) {
	o.Rating = &v
}

// GetReviewText returns the ReviewText field value if set, zero value otherwise.
func (o *Review) GetReviewText() string {
	if o == nil || IsNil(o.ReviewText) {
		var ret string
		return ret
	}
	return *o.ReviewText
}

// GetReviewTextOk returns a tuple with the ReviewText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Review) GetReviewTextOk() (*string, bool) {
	if o == nil || IsNil(o.ReviewText) {
		return nil, false
	}
	return o.ReviewText, true
}

// HasReviewText returns a boolean if a field has been set.
func (o *Review) HasReviewText() bool {
	if o != nil && !IsNil(o.ReviewText) {
		return true
	}

	return false
}

// SetReviewText gets a reference to the given string and assigns it to the ReviewText field.
func (o *Review) SetReviewText(v string) {
	o.ReviewText = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Review) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Review) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Review) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o Review) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Review) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["bookId"] = o.BookId
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.ReviewText) {
		toSerialize["reviewText"] = o.ReviewText
	}
	toSerialize["createdAt"] = o.CreatedAt
	return toSerialize, nil
}

func (o *Review) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"bookId",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReview := _Review{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReview)

	if err != nil {
		return err
	}

	*o = Review(varReview)

	return err
}

type NullableReview struct {
	value *Review
	isSet bool
}

func (v NullableReview) Get() *Review {
	return v.value
}

func (v *NullableReview) Set(val *Review) {
	v.value = val
	v.isSet = true
}

func (v NullableReview) IsSet() bool {
	return v.isSet
}

func (v *NullableReview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReview(val *Review) *NullableReview {
	return &NullableReview{value: val, isSet: true}
}

func (v NullableReview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


