openapi: 3.0.1
info:
  description: |
    This app allows for making lists of various types across different media and will eventually have
    fuzzy searching and rating functionality added to it.
  title: Inkspire
  version: 0.0.1
servers:
- url: /
tags:
- description: Track read and to-be-read books
  name: Books
paths:
  /books:
    get:
      description: Get all books from the list
      operationId: get-books
      parameters:
      - description: Limit the number of results returned.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          example: 10
          type: integer
        style: form
      - description: Offset the start of the result set.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          example: 0
          type: integer
        style: form
      - description: Filter books by multiple genres.
        explode: true
        in: query
        name: genre
        required: false
        schema:
          example:
          - Fantasy
          - Epic
          items:
            type: string
          type: array
        style: form
      - description: Filter books by reading status.
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - read
          - to-be-read
          example: read
          type: string
        style: form
      - description: Filter books by author name.
        explode: true
        in: query
        name: author
        required: false
        schema:
          example: Brandon Sanderson
          type: string
        style: form
      - description: Sort books by a specific field.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - title
          - author
          - genre
          - status
          example: title
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_books_200_response'
          description: 200 - Successfully retrieved books.
          headers:
            CacheControl:
              $ref: '#/components/headers/CacheControl'
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "400":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/bad-request
                title: Bad Request
                status: 400
                detail: The request is invalid or missing required parameters.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 400 - Bad Request
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "401":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/unauthorized
                title: Unauthorized
                status: 401
                detail: You do not have the necessary permissions.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 401 - Unauthorized
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "403":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/forbidden
                title: Forbidden
                status: 403
                detail: Access is forbidden with the provided credentials.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 403 - Forbidden
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "404":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/not-found
                title: Not Found
                status: 404
                detail: The requested resource was not found.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 404 - Not Found
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
      summary: Get all books
      tags:
      - Books
    post:
      description: Add a specific book
      operationId: add-book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
        description: Create a new book
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedResponse'
          description: 201 - Resource created successfully.
          headers:
            Location:
              $ref: '#/components/headers/Location'
        "400":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/bad-request
                title: Bad Request
                status: 400
                detail: The request is invalid or missing required parameters.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 400 - Bad Request
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "401":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/unauthorized
                title: Unauthorized
                status: 401
                detail: You do not have the necessary permissions.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 401 - Unauthorized
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "403":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/forbidden
                title: Forbidden
                status: 403
                detail: Access is forbidden with the provided credentials.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 403 - Forbidden
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "404":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/not-found
                title: Not Found
                status: 404
                detail: The requested resource was not found.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 404 - Not Found
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
      summary: Add a book
      tags:
      - Books
  /books/{bookId}:
    delete:
      description: Delete a specific book by bookId
      operationId: delete-book
      parameters:
      - description: The ID of the book.
        explode: false
        in: path
        name: bookId
        required: true
        schema:
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_books_200_response'
          description: 200 - Successfully deleted books.
          headers:
            CacheControl:
              $ref: '#/components/headers/CacheControl'
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "400":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/bad-request
                title: Bad Request
                status: 400
                detail: The request is invalid or missing required parameters.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 400 - Bad Request
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "401":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/unauthorized
                title: Unauthorized
                status: 401
                detail: You do not have the necessary permissions.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 401 - Unauthorized
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "403":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/forbidden
                title: Forbidden
                status: 403
                detail: Access is forbidden with the provided credentials.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 403 - Forbidden
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "404":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/not-found
                title: Not Found
                status: 404
                detail: The requested resource was not found.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 404 - Not Found
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
      summary: Delete a book
      tags:
      - Books
    get:
      description: Get a specific book by passing its bookId and return the book info
      operationId: get-book
      parameters:
      - description: The ID of the book.
        explode: false
        in: path
        name: bookId
        required: true
        schema:
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_books_200_response'
          description: 200 - Successfully retrieved book.
          headers:
            CacheControl:
              $ref: '#/components/headers/CacheControl'
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "400":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/bad-request
                title: Bad Request
                status: 400
                detail: The request is invalid or missing required parameters.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 400 - Bad Request
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "401":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/unauthorized
                title: Unauthorized
                status: 401
                detail: You do not have the necessary permissions.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 401 - Unauthorized
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "403":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/forbidden
                title: Forbidden
                status: 403
                detail: Access is forbidden with the provided credentials.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 403 - Forbidden
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "404":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/not-found
                title: Not Found
                status: 404
                detail: The requested resource was not found.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 404 - Not Found
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
      summary: Get a specific book
      tags:
      - Books
    patch:
      description: Update fields of an existing book
      operationId: update-book
      parameters:
      - description: The ID of the book.
        explode: false
        in: path
        name: bookId
        required: true
        schema:
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_books_200_response'
          description: 200 - Successfully updated fields.
          headers:
            CacheControl:
              $ref: '#/components/headers/CacheControl'
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "400":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/bad-request
                title: Bad Request
                status: 400
                detail: The request is invalid or missing required parameters.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 400 - Bad Request
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "401":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/unauthorized
                title: Unauthorized
                status: 401
                detail: You do not have the necessary permissions.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 401 - Unauthorized
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "403":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/forbidden
                title: Forbidden
                status: 403
                detail: Access is forbidden with the provided credentials.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 403 - Forbidden
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "404":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/not-found
                title: Not Found
                status: 404
                detail: The requested resource was not found.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 404 - Not Found
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
      summary: Update a book
      tags:
      - Books
    put:
      description: Replace an existing book entirely
      operationId: replace-book
      parameters:
      - description: The ID of the book.
        explode: false
        in: path
        name: bookId
        required: true
        schema:
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_books_200_response'
          description: 200 - Successfully updated book.
          headers:
            CacheControl:
              $ref: '#/components/headers/CacheControl'
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "400":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/bad-request
                title: Bad Request
                status: 400
                detail: The request is invalid or missing required parameters.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 400 - Bad Request
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "401":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/unauthorized
                title: Unauthorized
                status: 401
                detail: You do not have the necessary permissions.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 401 - Unauthorized
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "403":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/forbidden
                title: Forbidden
                status: 403
                detail: Access is forbidden with the provided credentials.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 403 - Forbidden
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
        "404":
          content:
            application/problem+json:
              example:
                type: https://example.com/errors/not-found
                title: Not Found
                status: 404
                detail: The requested resource was not found.
              schema:
                $ref: '#/components/schemas/Problem'
          description: 404 - Not Found
          headers:
            RateLimit:
              $ref: '#/components/headers/RateLimit'
      summary: Replace a book
      tags:
      - Books
components:
  headers:
    CacheControl:
      description: "The CacheControl header communicates directives for caching mechanisms\
        \ in both requests and responses. \nIt is used to specify the caching directives\
        \ in responses to prevent caches from storing sensitive information.\n"
      examples:
        oneHour:
          value: max-age=3600
        oneWeekPublic:
          value: "max-age=604800, public"
        noStore:
          value: no-store
        noCache:
          value: no-cache
        private:
          value: private
      explode: false
      schema:
        description: "A comma-separated list of directives as defined in [RFC 9111](https://www.rfc-editor.org/rfc/rfc9111.html)."
        type: string
      style: simple
    Location:
      description: URL of the newly created resource.
      explode: false
      schema:
        example: /books/550e8400-e29b-41d4-a716-446655440000
        type: string
      style: simple
    RateLimit:
      description: |
        The RateLimit header communicates quota policies. It contains a `limit` to
        convey the expiring limit, `remaining` to convey the remaining quota units,
        and `reset` to convey the time window reset time.
      explode: false
      schema:
        type: string
      style: simple
    RetryAfter:
      description: "The Retry-After header indicates how long the user agent should\
        \ wait before making a follow-up request. \nThe value is in seconds and can\
        \ be an integer or a date in the future. \nIf the value is an integer, it\
        \ indicates the number of seconds to wait. \nIf the value is a date, it indicates\
        \ the time at which the user agent should make a follow-up request.\n"
      examples:
        integer:
          summary: Retry after 120 seconds
          value: "120"
        date:
          summary: Retry after the specified date
          value: "Fri, 31 Dec 2021 23:59:59 GMT"
      explode: false
      schema:
        type: string
      style: simple
  parameters:
    bookId:
      description: The ID of the book.
      explode: false
      in: path
      name: bookId
      required: true
      schema:
        example: 550e8400-e29b-41d4-a716-446655440000
        format: uuid
        type: string
      style: simple
    genre:
      description: Filter books by multiple genres.
      explode: true
      in: query
      name: genre
      required: false
      schema:
        example:
        - Fantasy
        - Epic
        items:
          type: string
        type: array
      style: form
    limit:
      description: Limit the number of results returned.
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 10
        example: 10
        type: integer
      style: form
    offset:
      description: Offset the start of the result set.
      explode: true
      in: query
      name: offset
      required: false
      schema:
        default: 0
        example: 0
        type: integer
      style: form
  responses:
    "400":
      content:
        application/problem+json:
          example:
            type: https://example.com/errors/bad-request
            title: Bad Request
            status: 400
            detail: The request is invalid or missing required parameters.
          schema:
            $ref: '#/components/schemas/Problem'
      description: 400 - Bad Request
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
    "401":
      content:
        application/problem+json:
          example:
            type: https://example.com/errors/unauthorized
            title: Unauthorized
            status: 401
            detail: You do not have the necessary permissions.
          schema:
            $ref: '#/components/schemas/Problem'
      description: 401 - Unauthorized
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
    "403":
      content:
        application/problem+json:
          example:
            type: https://example.com/errors/forbidden
            title: Forbidden
            status: 403
            detail: Access is forbidden with the provided credentials.
          schema:
            $ref: '#/components/schemas/Problem'
      description: 403 - Forbidden
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
    "404":
      content:
        application/problem+json:
          example:
            type: https://example.com/errors/not-found
            title: Not Found
            status: 404
            detail: The requested resource was not found.
          schema:
            $ref: '#/components/schemas/Problem'
      description: 404 - Not Found
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
    "429":
      content:
        application/problem+json:
          example:
            type: https://example.com/errors/too-many-requests
            title: Too Many Requests
            status: 429
            detail: You have exceeded the rate limit.
          schema:
            $ref: '#/components/schemas/Problem'
      description: 429 - Too Many Requests
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
        RetryAfter:
          $ref: '#/components/headers/RetryAfter'
    "500":
      content:
        application/problem+json:
          example:
            type: https://example.com/errors/internal-server-error
            title: Internal Server Error
            status: 500
            detail: An unexpected error occurred.
          schema:
            $ref: '#/components/schemas/Problem'
      description: 500 - Internal Server Error
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
  schemas:
    Author:
      properties:
        id:
          example: 1a3e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        name:
          example: Sandon Branderson
          type: string
        birthDate:
          example: 1975-06-01
          format: date
          type: string
        nationality:
          example: American
          type: string
      required:
      - id
      - name
      type: object
    Book:
      example:
        pages: 1690
        genres:
        - Fantasy
        - Epic
        - Thriller
        id: 550e8400-e29b-41d4-a716-446655440000
        title: The Lusty Argonian Maid
        authorId: 1a3e4567-e89b-12d3-a456-426614174000
        seriesId: 2b3e4567-e89b-12d3-a456-426614174000
        status: read
        updatedAt: 2024-01-30T12:00:00Z
      properties:
        id:
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
        title:
          example: The Lusty Argonian Maid
          type: string
        authorId:
          example: 1a3e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        seriesId:
          example: 2b3e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        genres:
          example:
          - Fantasy
          - Epic
          - Thriller
          items:
            type: string
          type: array
        pages:
          example: 1690
          format: int32
          minimum: 1
          type: integer
        status:
          enum:
          - read
          - to-be-read
          type: string
        updatedAt:
          example: 2024-01-30T12:00:00Z
          format: date-time
          type: string
      required:
      - authorId
      - id
      - title
      type: object
    CreatedResponse:
      example:
        id: 550e8400-e29b-41d4-a716-446655440000
        message: Resource created successfully.
      properties:
        id:
          description: The unique identifier of the created resource.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
        message:
          description: Confirmation message.
          example: Resource created successfully.
          type: string
      type: object
    Genre:
      properties:
        id:
          example: 3c3e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        name:
          example: Fantasy
          type: string
      required:
      - id
      - name
      type: object
    Metadata:
      example:
        total: 100
        offset: 0
        limit: 10
      properties:
        total:
          example: 100
          type: integer
        limit:
          example: 10
          type: integer
        offset:
          example: 0
          type: integer
      type: object
    NewBook:
      example:
        pages: 1690
        genres:
        - Fantasy
        - Epic
        - Thriller
        title: The Lusty Argonian Maid
        authorId: 1a3e4567-e89b-12d3-a456-426614174000
        seriesId: 2b3e4567-e89b-12d3-a456-426614174000
        status: read
      properties:
        title:
          example: The Lusty Argonian Maid
          type: string
        authorId:
          example: 1a3e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        seriesId:
          example: 2b3e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        genres:
          example:
          - Fantasy
          - Epic
          - Thriller
          items:
            type: string
          type: array
        pages:
          example: 1690
          format: int32
          minimum: 1
          type: integer
        status:
          enum:
          - read
          - to-be-read
          type: string
      type: object
    Problem:
      properties:
        type:
          description: A URI reference that identifies the problem type.
          type: string
        title:
          description: "A short, human-readable summary of the problem type."
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of
            the problem.
          type: string
        instance:
          description: A URI reference that identifies the specific occurrence of
            the problem.
          type: string
        status:
          description: The HTTP status code.
          type: integer
      type: object
    Review:
      properties:
        id:
          example: 4d3e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        bookId:
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
        rating:
          example: 5
          format: int32
          maximum: 5
          minimum: 1
          type: integer
        reviewText:
          example: An absolute masterpiece!
          type: string
        createdAt:
          example: 2024-01-30T12:00:00Z
          format: date-time
          type: string
      required:
      - bookId
      - createdAt
      - id
      type: object
    Series:
      properties:
        id:
          example: 2b3e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        name:
          example: Wheel of Time
          type: string
      required:
      - id
      - name
      type: object
    get_books_200_response:
      example:
        metadata:
          total: 100
          offset: 0
          limit: 10
        data:
        - pages: 1690
          genres:
          - Fantasy
          - Epic
          - Thriller
          id: 550e8400-e29b-41d4-a716-446655440000
          title: The Lusty Argonian Maid
          authorId: 1a3e4567-e89b-12d3-a456-426614174000
          seriesId: 2b3e4567-e89b-12d3-a456-426614174000
          status: read
          updatedAt: 2024-01-30T12:00:00Z
        - pages: 1690
          genres:
          - Fantasy
          - Epic
          - Thriller
          id: 550e8400-e29b-41d4-a716-446655440000
          title: The Lusty Argonian Maid
          authorId: 1a3e4567-e89b-12d3-a456-426614174000
          seriesId: 2b3e4567-e89b-12d3-a456-426614174000
          status: read
          updatedAt: 2024-01-30T12:00:00Z
      properties:
        data:
          items:
            $ref: '#/components/schemas/Book'
          type: array
        metadata:
          $ref: '#/components/schemas/Metadata'
      type: object
