openapi: 3.1.0
info:
  title: Inkspire
  description: |
    This app allows for making lists of various types across different media and will eventually have
    fuzzy searching and rating functionality added to it.
  version: 0.0.1
tags:
  - name: Books
    description: Track read and to-be-read books
paths:
  /books:
    get:
      summary: Get all books
      description: Get all books from the list
      operationId: get-books
      tags:
        - Books
      parameters:
        - $ref: "#/components/parameters/pagination"
        - $ref: "#/components/parameters/Genre"
        - name: status
          in: query
          required: false
          description: Filter books by reading status.
          schema:
            type: string
            enum: [read, to-be-read]
            example: read
        - name: author
          in: query
          required: false
          description: Filter books by author name.
          schema:
            type: string
            example: "Brandon Sanderson"
        - name: sort
          in: query
          required: false
          description: Sort books by a specific field.
          schema:
            type: string
            enum: [title, author, genre, status]
            example: title
      responses:
        "200":
          $ref: "#/components/responses/SuccessBooks"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add a book
      description: Add a specific book
      operationId: add-book
      tags:
        - Books
      requestBody:
        description: Create a new book
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "200":
          $ref: "#/components/responses/SuccessBook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
  /books/{bookId}:
    get:
      summary: Get a specific book
      description: Get a specific book by passing its bookId and return the book info
      operationId: get-book
      tags:
        - Books
      parameters:
        - $ref: "#/components/parameters/bookId"
      responses:
        "200":
          $ref: "#/components/responses/SuccessBook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete a book
      description: Delete a specific book by bookId
      operationId: delete-book
      tags:
        - Books
      parameters:
        - $ref: "#/components/parameters/bookId"
      responses:
        "200":
          $ref: "#/components/responses/SuccessBook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Replace a book
      description: Replace an existing book entirely
      operationId: replace-book
      tags:
        - Books
      parameters:
        - $ref: "#/components/parameters/bookId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "The Lusty Argonian Maid"
                author:
                  type: string
                  example: "Sandon Branderson"
                series:
                  type: string
                  example: "Wheel of Time"
                genre:
                  type: array
                  items:
                    type: string
                  example: ["Fantasy", "Epic", "Thriller"]
                pages:
                  type: integer
                  format: int32
                  example: 1690
                status:
                  type: string
                  enum: [read, to-be-read]
                  description: Indicates whether the book is read or to be read.
      responses:
        "200":
          $ref: "#/components/responses/SuccessBook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update a book
      description: Update fields of an existing book
      operationId: update-book
      tags:
        - Books
      parameters:
        - $ref: "#/components/parameters/bookId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "The Lusty Argonian Maid"
                author:
                  type: string
                  example: "Sandon Branderson"
                series:
                  type: string
                  example: "Wheel of Time"
                genre:
                  type: array
                  items:
                    type: string
                  example: ["Fantasy", "Epic", "Thriller"]
                pages:
                  type: integer
                  format: int32
                  example: 1690
                status:
                  type: string
                  enum: [read, to-be-read]
                  description: Indicates whether the book is read or to be read.
      responses:
        "200":
          $ref: "#/components/responses/SuccessBook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
components:
  responses:
