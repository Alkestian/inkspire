openapi: 3.1.0
info:
  title: Inkspire
  description: |
    This app allows for making lists of various types across different media and will eventually have
    fuzzy searching and rating functionality added to it.
  version: 0.0.1
tags:
  - name: Books
    description: Track read and to-be-read books
paths:
  /books:
    get:
      summary: Get all books
      description: Get all books from the list
      operationId: get-books
      tags:
        - Books
      parameters:
        - $ref: "#/components/parameters/pagination"
        - $ref: "#/components/parameters/Genre"
        - name: status
          in: query
          required: false
          description: Filter books by reading status.
          schema:
            type: string
            enum: [read, to-be-read]
            example: read
        - name: author
          in: query
          required: false
          description: Filter books by author name.
          schema:
            type: string
            example: "Brandon Sanderson"
        - name: sort
          in: query
          required: false
          description: Sort books by a specific field.
          schema:
            type: string
            enum: [title, author, genre, status]
            example: title
      responses:
        "200":
          $ref: "#/components/responses/SuccessBooks"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add a book
      description: Add a specific book
      operationId: add-book
      tags:
        - Books
      requestBody:
        description: Create a new book
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "200":
          $ref: "#/components/responses/SuccessBook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
  /books/{bookId}:
    get:
      summary: Get a specific book
      description: Get a specific book by passing its bookId and return the book info
      operationId: get-book
      tags:
        - Books
      parameters:
        - $ref: "#/components/parameters/bookId"
      responses:
        "200":
          $ref: "#/components/responses/SuccessBook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete a book
      description: Delete a specific book by bookId
      operationId: delete-book
      tags:
        - Books
      parameters:
        - $ref: "#/components/parameters/bookId"
      responses:
        "200":
          $ref: "#/components/responses/SuccessBook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Replace a book
      description: Replace an existing book entirely
      operationId: replace-book
      tags:
        - Books
      parameters:
        - $ref: "#/components/parameters/bookId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "The Lusty Argonian Maid"
                author:
                  type: string
                  example: "Sandon Branderson"
                series:
                  type: string
                  example: "Wheel of Time"
                genre:
                  type: array
                  items:
                    type: string
                  example: ["Fantasy", "Epic", "Thriller"]
                pages:
                  type: integer
                  format: int32
                  example: 1690
                status:
                  type: string
                  enum: [read, to-be-read]
                  description: Indicates whether the book is read or to be read.
      responses:
        "200":
          $ref: "#/components/responses/SuccessBook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update a book
      description: Update fields of an existing book
      operationId: update-book
      tags:
        - Books
      parameters:
        - $ref: "#/components/parameters/bookId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "The Lusty Argonian Maid"
                author:
                  type: string
                  example: "Sandon Branderson"
                series:
                  type: string
                  example: "Wheel of Time"
                genre:
                  type: array
                  items:
                    type: string
                  example: ["Fantasy", "Epic", "Thriller"]
                pages:
                  type: integer
                  format: int32
                  example: 1690
                status:
                  type: string
                  enum: [read, to-be-read]
                  description: Indicates whether the book is read or to be read.
      responses:
        "200":
          $ref: "#/components/responses/SuccessBook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
components:
  responses:
    "200":
      description: "Successfully retrieved books."
      headers:
        Cache-Control:
          $ref: "#/components/headers/Cache-Control"
        RateLimit:
          $ref: "#/components/headers/RateLimit"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponse"

    "201":
      description: "Resource created successfully."
      headers:
        Location:
          $ref: "#/components/headers/Location"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreatedResponse"

    "400":
      description: "Bad Request"
      headers:
        RateLimit:
          $ref: "#/components/headers/RateLimit"
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "https://example.com/errors/bad-request"
            title: "Bad Request"
            status: 400
            detail: "The request is invalid or missing required parameters."

    "401":
      description: "Unauthorized"
      headers:
        RateLimit:
          $ref: "#/components/headers/RateLimit"
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "https://example.com/errors/unauthorized"
            title: "Unauthorized"
            status: 401
            detail: "You do not have the necessary permissions."

    "403":
      description: "Forbidden"
      headers:
        RateLimit:
          $ref: "#/components/headers/RateLimit"
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "https://example.com/errors/forbidden"
            title: "Forbidden"
            status: 403
            detail: "Access is forbidden with the provided credentials."

    "404":
      description: "Not Found"
      headers:
        RateLimit:
          $ref: "#/components/headers/RateLimit"
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "https://example.com/errors/not-found"
            title: "Not Found"
            status: 404
            detail: "The requested resource was not found."

    "429":
      description: "Too Many Requests"
      headers:
        RateLimit:
          $ref: "#/components/headers/RateLimit"
        Retry-After:
          $ref: "#/components/headers/Retry-After"
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "https://example.com/errors/too-many-requests"
            title: "Too Many Requests"
            status: 429
            detail: "You have exceeded the rate limit."

    "500":
      description: "Internal Server Error"
      headers:
        RateLimit:
          $ref: "#/components/headers/RateLimit"
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
          example:
            type: "https://example.com/errors/internal-server-error"
            title: "Internal Server Error"
            status: 500
            detail: "An unexpected error occurred."
