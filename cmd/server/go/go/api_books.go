// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Inkspire
 *
 * This app allows for making lists of various types across different media and will eventually have fuzzy searching and rating functionality added to it. 
 *
 * API version: 0.0.1
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// BooksAPIController binds http requests to an api service and writes the service results to the http response
type BooksAPIController struct {
	service BooksAPIServicer
	errorHandler ErrorHandler
}

// BooksAPIOption for how the controller is set up.
type BooksAPIOption func(*BooksAPIController)

// WithBooksAPIErrorHandler inject ErrorHandler into controller
func WithBooksAPIErrorHandler(h ErrorHandler) BooksAPIOption {
	return func(c *BooksAPIController) {
		c.errorHandler = h
	}
}

// NewBooksAPIController creates a default api controller
func NewBooksAPIController(s BooksAPIServicer, opts ...BooksAPIOption) *BooksAPIController {
	controller := &BooksAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BooksAPIController
func (c *BooksAPIController) Routes() Routes {
	return Routes{
		"GetBooks": Route{
			strings.ToUpper("Get"),
			"/books",
			c.GetBooks,
		},
		"AddBook": Route{
			strings.ToUpper("Post"),
			"/books",
			c.AddBook,
		},
		"GetBook": Route{
			strings.ToUpper("Get"),
			"/books/{bookId}",
			c.GetBook,
		},
		"ReplaceBook": Route{
			strings.ToUpper("Put"),
			"/books/{bookId}",
			c.ReplaceBook,
		},
		"DeleteBook": Route{
			strings.ToUpper("Delete"),
			"/books/{bookId}",
			c.DeleteBook,
		},
		"UpdateBook": Route{
			strings.ToUpper("Patch"),
			"/books/{bookId}",
			c.UpdateBook,
		},
	}
}

// GetBooks - Get all books
func (c *BooksAPIController) GetBooks(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 10
		limitParam = param
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "offset", Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	var genreParam []string
	if query.Has("genre") {
		genreParam = strings.Split(query.Get("genre"), ",")
	}
	var statusParam string
	if query.Has("status") {
		param := query.Get("status")

		statusParam = param
	} else {
	}
	var authorParam string
	if query.Has("author") {
		param := query.Get("author")

		authorParam = param
	} else {
	}
	var sortParam string
	if query.Has("sort") {
		param := query.Get("sort")

		sortParam = param
	} else {
	}
	result, err := c.service.GetBooks(r.Context(), limitParam, offsetParam, genreParam, statusParam, authorParam, sortParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddBook - Add a book
func (c *BooksAPIController) AddBook(w http.ResponseWriter, r *http.Request) {
	var newBookParam NewBook
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&newBookParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNewBookRequired(newBookParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNewBookConstraints(newBookParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddBook(r.Context(), newBookParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBook - Get a specific book
func (c *BooksAPIController) GetBook(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	bookIdParam := params["bookId"]
	if bookIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"bookId"}, nil)
		return
	}
	result, err := c.service.GetBook(r.Context(), bookIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReplaceBook - Replace a book
func (c *BooksAPIController) ReplaceBook(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	bookIdParam := params["bookId"]
	if bookIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"bookId"}, nil)
		return
	}
	var bookParam Book
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bookParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBookRequired(bookParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBookConstraints(bookParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ReplaceBook(r.Context(), bookIdParam, bookParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteBook - Delete a book
func (c *BooksAPIController) DeleteBook(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	bookIdParam := params["bookId"]
	if bookIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"bookId"}, nil)
		return
	}
	result, err := c.service.DeleteBook(r.Context(), bookIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateBook - Update a book
func (c *BooksAPIController) UpdateBook(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	bookIdParam := params["bookId"]
	if bookIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"bookId"}, nil)
		return
	}
	var bookParam Book
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bookParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBookRequired(bookParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBookConstraints(bookParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateBook(r.Context(), bookIdParam, bookParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
